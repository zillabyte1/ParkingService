@namespace BlazorApp
@inherits ParkBaseDomControl

@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util

  <div class="card border m-1">
    <div class="card-header">
      @ChartTitle ( @MaxSpaces )
    </div>
    <div class="card-body">
      <ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="@ChartHeight" Height="@ChartWidth" />
    </div>
  </div>


@code {

  [Parameter]
  public RenderFragment ChildContent { get; set; }

  ParkingLot rec = new ParkingLot();
  private string _idKey = "";
  private int _height = 0;
  private int _width = 0;
  private string _charttitle = "[title]";
  private int _occupied = 0;
  private int _maxspaces = 0;
  private int _AvailableSpaces = 0;

  //private string chartSizes[] = { }

  private string chartLegend {
    get { return string.Format("Max Spaces: {0}", _maxspaces.ToString()); }
  }

  [Parameter]
  public int ChartHeight {
    get {
      return _height;
    }
    set {
      _height = value;
    }
  }

  [Parameter]
  public int ChartWidth {
    get { return _width; }
    set { _width = value; }
  }

  [Parameter]
  public ParkingLot LotData {
    get { return rec; }
    set {
      rec = value;
      _idKey = rec.LotKey;
    }
  }

  [Parameter]
  public string ChartTitle {
    get { return _charttitle; }
    set {
      _charttitle = value;
    }
  }

  [Parameter]
  public string idKey {
    get { return _idKey; }
    set {
      _idKey = value;
    }
  }

  [Parameter]
  public int OccupiedSpaces {
    get { return _occupied; }
    set {
      _occupied = value;
    }
  }

  [Parameter]
  public int MaxSpaces {
    get { return _maxspaces; }
    set {
      _maxspaces = value;
    }
  }

  [Parameter]
  public int AvailableSpaces {
    get { return _maxspaces - _occupied; }
    set {
      _AvailableSpaces = value;
    }
  }

  //-- private vars
  private PieConfig _config;
  private ChartJsPieChart _pieChartJs;

  protected override void OnInitialized() {

    _config = new PieConfig {
      Options = new PieOptions {
        Title = new OptionsTitle {
          Display = true,
          Text = chartLegend
        },
        Responsive = true,
        Animation = new ArcAnimation {
          AnimateRotate = true,
          AnimateScale = true
        }
      }
    };

    _config.Data.Labels.AddRange(new[] { "Occupied", "Available" });

    var pieSet = new PieDataset {
      BackgroundColor = new[] { ColorUtil.RandomColorString(), ColorUtil.RandomColorString() },
      BorderWidth = 0,
      HoverBackgroundColor = ColorUtil.RandomColorString(),
      HoverBorderColor = ColorUtil.RandomColorString(),
      HoverBorderWidth = 1,
      BorderColor = "#a5a5a5",
    };

    pieSet.Data.AddRange(new double[] { OccupiedSpaces, AvailableSpaces });
    _config.Data.Datasets.Add(pieSet);
  }


}
